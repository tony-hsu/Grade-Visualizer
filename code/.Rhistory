det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
a = rbind(a, sample_matrix)
}
a = a[-1,]
a = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
a = rbind(a, sample_matrix)
}
a = a[-1,]
a
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
drawn_balls
nrow(drawn_balls)
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
drawn_balls
for (i in 1:nrow(drawn_balls)) {
}
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0
for (i in 1:nrow(drawn_balls)) {
sample = drawn_balls[i,]
num = sum(sample == "blue")
if (num == 0) {
count0 = count0 + 1
}
if (num == 1) {
count1 = count1 + 1
}
if (num == 2) {
count2 = count2 + 1
}
if (num == 3) {
count3 = count3 + 1
}
if (num == 4) {
count4 = count4 + 1
}
}
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0
for (i in 1:nrow(drawn_balls)) {
sample = drawn_balls[i,]
num = sum(sample == "blue")
if (num == 0) {
count0 = count0 + 1
}
if (num == 1) {
count1 = count1 + 1
}
if (num == 2) {
count2 = count2 + 1
}
if (num == 3) {
count3 = count3 + 1
}
if (num == 4) {
count4 = count4 + 1
}
}
count4
#Grouping the youtube videos by categories
grouped_categories = youtube %>%
group_by(categories = category_id) %>%
summarise(avg_mean_by_cat = mean(views))
#Loading Packages
library(ggplot2)
library(png)
library(grid)
library(readr)
library(dplyr)
#Loading the data frame youtube and displaying a few rows
youtube = read_csv("../data/GBvideos.csv")
#Showing a few rows of the data frame
head(youtube)
#Showing a logo of dplyr
img <- readPNG("../Images/dplyr.png")
grid.raster(img)
#Performing nested functions to select title of videos that have more than 5000 likes without Dplyr
head(select(filter(youtube, likes >
5000), title))
#Performing nested functions to select title of videos that have more than 5000 likes with Dplyr
youtube %>%
filter(likes > 5000) %>%
select(title) %>%
head()
#Grouping the youtube videos by categories
grouped_categories = youtube %>%
group_by(categories = category_id) %>%
summarise(avg_mean_by_cat = mean(views))
grouped_categories
b <- c(18, 15, 16, 4, 17, 9)
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in x) {
i = 100 * (i - xmin) / (xmax - xmin)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in x) {
i = 100 * (i - xmin) / (xmax - xmin)
print(i)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in 1:length(x)) {
x[i] = 100 * (x[i] - xmin) / (xmax - xmin)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
b <- c(10, 10, 8.5, 4, 7, 9)
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (lowest > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
}
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (lowest > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
return(result)
}
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (x[lowest] > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
return(result)
}
drop_lowest(b)
?stop
get_minimum = function(x, na.rm) {
if (! is.vector(x) && ! is.numeric(x)) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"))
get_minimum(c("1"), FALSE)
get_minimum = function(x, na.rm) {
if ((!is.vector(x)) && (!is.numeric(x))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"), FALSE)
((!is.vector(c("1"))) && (!is.numeric(c("1"))))
is.vector(c("1"))
is.numeric(c("1"))
get_minimum = function(x, na.rm) {
if (!(is.vector(x)) && (is.numeric(x))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
is.numeric(c("1"))
get_minimum(c("1"), FALSE)
get_minimum = function(x, na.rm) {
if (!((is.vector(x)) && (is.numeric(x)))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"), FALSE)
get_minimum(c(1,2,NA), FALSE)
get_minimum(c(1,2,NA), TRUE)
get_minimum = function(x, na.rm) {
if (!((is.vector(x)) && (is.numeric(x)))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
if (NA %in% x) {
return(NA)
}
x = sort(x)
return(x[1])
}
get_minimum(c(1,2,NA), FALSE)
library(shiny)
library(ggvis)
library(dplyr)
library(readr)
install.packages(ggvis)
install.packages("ggvis")
library(shiny)
library(ggvis)
library(dplyr)
library(readr)
runApp('stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
library(shiny); runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
# test script
library(testthat)
# source in functions to be tested
source("functions.R")
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
setwd("stat133/stat133-hws-fall17/hw04/code")
# test script
library(testthat)
# source in functions to be tested
source("functions.R")
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
# ===================================================================
# Title: Cleaning Data
# Description:
#   This script performs cleaning tasks and transformations on
#   various columns of the raw data file.
# Input(s): data files 'rawscores.csv'
# Output(s): data file 'cleanscores.csv'
# Author: Tony Hsu
# Date: 11-07-2017
# ===================================================================
# packages/functions
library(readr)    # importing data
library(dplyr)    # data wrangling
source("functions.R") #data cleaning functions
# read csv files
raw = read_csv("../data/rawdata/rawscores.csv")
# output the rawscore data frame and its summary
sink(file = "../output/summary-rawscores.txt")
str(raw)
print(noquote(""))
for (i in 1:ncol(raw)) {
print(names(raw)[i])
stat = summary_stats(as.data.frame( raw[,i], drop=TRUE)[[1]])
print_stats(stat)
print(noquote(""))
}
sink()
# replacing NA with 0
for (i in 1:ncol(raw)) {
for (j in 1:nrow(raw)) {
if (is.na(raw[j,i])) {
raw[j,i] = 0
}
}
}
#rescaling columns
raw = mutate(raw, QZ1 = rescale100(raw$QZ1, 0, 12) )
raw = mutate(raw, QZ2 = rescale100(raw$QZ2, 0, 18) )
raw = mutate(raw, QZ3 = rescale100(raw$QZ3, 0, 20) )
raw = mutate(raw, QZ4 = rescale100(raw$QZ4, 0, 20) )
raw = mutate(raw, Test1 = rescale100(raw$EX1, 0, 80) )
raw = mutate(raw, Test2 = rescale100(raw$EX2, 0, 90) )
Homework = c()
for (i in 1:nrow(raw)) {
temp = c()
for (j in 1:9) {
temp[j] = raw[[j]][i]
}
individual_hw = score_homework(temp, TRUE)
Homework[i] = individual_hw
}
raw = mutate(raw, Homework = Homework)
Quiz_all = c()
for (i in 1:nrow(raw)) {
temp = c()
count = 1
for (j in 11:14) {
temp[count] = raw[[j]][i]
count = count + 1
}
individual_quiz = score_quiz(temp, TRUE)
Quiz_all[i] = individual_quiz
}
raw = mutate(raw, Quiz = Quiz_all)
lab = sapply(as.vector(raw$ATT), score_lab)
raw = mutate(raw, Lab = lab)
overall = c()
for (i in 1:nrow(raw)) {
value = (0.3 * raw$Homework[i]) +
0.1 * raw$Lab[i] +
0.15 * raw$Quiz[i] +
0.2 * raw$Test1[i] +
0.25 * raw$Test2[i]
overall[i] = value
}
raw = mutate(raw, Overall = overall)
Grading = function(x) {
if (x < 50) {
return("F")
} else if ((x>= 50) & (x< 60)) {
return ("D")
} else if ((x>= 60) & (x< 70)) {
return ("C-")
} else if ((x>= 70) & (x< 77.5)) {
return ("C")
} else if ((x>= 77.5) & (x< 79.5)) {
return ("C+")
} else if ((x>= 79.5) & (x< 82)) {
return ("B-")
} else if ((x>= 82) & (x< 86)) {
return ("B")
} else if ((x>= 86) & (x< 88)) {
return ("B+")
} else if ((x>= 88) & (x< 90)) {
return ("A-")
} else if ((x>= 90) & (x< 95)) {
return ("A")
} else if (x>= 95) {
return ("A+")
}
}
grades = c()
for (i in 1:nrow(raw)) {
grade = Grading(raw$Overall[i])
grades[i] = grade
}
raw = mutate(raw, Grade = grades)
for (i in c("ATT", "Homework", "Quiz", "Test1", "Test2")) {
column = raw[[i]]
stats = summary_stats(column)
if (i == "ATT") {
output_string = "Lab-stats.txt"
} else {
output_string = paste0(i, "-stats.txt")
}
sink(file = paste0("../output/", output_string))
print_stats(stats)
sink()
}
sink(file = "../output/summary-cleanscores.txt")
str(raw)
sink()
write_csv(raw,path = "../data/cleandata/cleanscores.csv")
raw
library(shiny); runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
cleanScore = read_csv("../data/cleandata/cleanscores.csv")
cleanScore = mutate(cleanScore, Grade = as.factor(Grade))
Grades = cleanScore$Grade
Grade = as.data.frame(table(Grades))[,1]
Freq = as.data.frame(table(Grades))[,2]
Prop = as.data.frame(prop.table(table(Grades)))[,2]
gradeTable = data.frame(Grade, Freq, Prop)
temp = gradeTable[1,]
gradeTable[1,] = gradeTable[2,]
gradeTable[2,] = temp
temp = gradeTable[1,]
gradeTable[1,] = gradeTable[3,]
gradeTable[3,] = temp
temp = gradeTable[1 + 3,]
gradeTable[1+ 3,] = gradeTable[2+ 3,]
gradeTable[2+ 3,] = temp
temp = gradeTable[1+ 3,]
gradeTable[1+ 3,] = gradeTable[3+ 3,]
gradeTable[3+ 3,] = temp
temp = gradeTable[1 + 6,]
gradeTable[1+ 6,] = gradeTable[2+ 6,]
gradeTable[2+ 6,] = temp
temp = gradeTable[1+ 6,]
gradeTable[1+ 6,] = gradeTable[3+ 6,]
gradeTable[3+ 6,] = temp
gradeTable
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
gradeTable
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
?as.factor
cleanScore$Grade
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
runApp('~/stat133/stat133-hws-fall17/hw04/app/helper3.R')
