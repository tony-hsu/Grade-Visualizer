det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
drawn_balls
nrow(drawn_balls)
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
drawn_balls
for (i in 1:nrow(drawn_balls)) {
}
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0
for (i in 1:nrow(drawn_balls)) {
sample = drawn_balls[i,]
num = sum(sample == "blue")
if (num == 0) {
count0 = count0 + 1
}
if (num == 1) {
count1 = count1 + 1
}
if (num == 2) {
count2 = count2 + 1
}
if (num == 3) {
count3 = count3 + 1
}
if (num == 4) {
count4 = count4 + 1
}
}
drawn_balls = matrix(data = NA, 1, 4)
for (i in 1:1000) {
det = runif(1)
if (det > 0.5) {
sample = sample(box1, 4, replace = TRUE)
} else {
sample = sample(box2, 4)
}
sample_matrix = matrix(sample, 1, 4)
drawn_balls = rbind(drawn_balls, sample_matrix)
}
drawn_balls = drawn_balls[-1,]
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0
for (i in 1:nrow(drawn_balls)) {
sample = drawn_balls[i,]
num = sum(sample == "blue")
if (num == 0) {
count0 = count0 + 1
}
if (num == 1) {
count1 = count1 + 1
}
if (num == 2) {
count2 = count2 + 1
}
if (num == 3) {
count3 = count3 + 1
}
if (num == 4) {
count4 = count4 + 1
}
}
count4
#Grouping the youtube videos by categories
grouped_categories = youtube %>%
group_by(categories = category_id) %>%
summarise(avg_mean_by_cat = mean(views))
#Loading Packages
library(ggplot2)
library(png)
library(grid)
library(readr)
library(dplyr)
#Loading the data frame youtube and displaying a few rows
youtube = read_csv("../data/GBvideos.csv")
#Showing a few rows of the data frame
head(youtube)
#Showing a logo of dplyr
img <- readPNG("../Images/dplyr.png")
grid.raster(img)
#Performing nested functions to select title of videos that have more than 5000 likes without Dplyr
head(select(filter(youtube, likes >
5000), title))
#Performing nested functions to select title of videos that have more than 5000 likes with Dplyr
youtube %>%
filter(likes > 5000) %>%
select(title) %>%
head()
#Grouping the youtube videos by categories
grouped_categories = youtube %>%
group_by(categories = category_id) %>%
summarise(avg_mean_by_cat = mean(views))
grouped_categories
b <- c(18, 15, 16, 4, 17, 9)
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in x) {
i = 100 * (i - xmin) / (xmax - xmin)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in x) {
i = 100 * (i - xmin) / (xmax - xmin)
print(i)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
rescale100 = function(x, xmin, xmax) {
for (i in 1:length(x)) {
x[i] = 100 * (x[i] - xmin) / (xmax - xmin)
}
return(x)
}
rescale100(b, xmin = 0, xmax = 20)
b <- c(10, 10, 8.5, 4, 7, 9)
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (lowest > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
}
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (lowest > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
return(result)
}
drop_lowest(b)
drop_lowest = function(x) {
lowest = 1
result = c()
for (i in 2:length(x)) {
if (x[lowest] > x[i]) {
result = c(result, x[lowest])
lowest = i
} else {
result = c(result, x[i])
}
}
return(result)
}
drop_lowest(b)
?stop
get_minimum = function(x, na.rm) {
if (! is.vector(x) && ! is.numeric(x)) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"))
get_minimum(c("1"), FALSE)
get_minimum = function(x, na.rm) {
if ((!is.vector(x)) && (!is.numeric(x))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"), FALSE)
((!is.vector(c("1"))) && (!is.numeric(c("1"))))
is.vector(c("1"))
is.numeric(c("1"))
get_minimum = function(x, na.rm) {
if (!(is.vector(x)) && (is.numeric(x))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
is.numeric(c("1"))
get_minimum(c("1"), FALSE)
get_minimum = function(x, na.rm) {
if (!((is.vector(x)) && (is.numeric(x)))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
x = sort(x)
return(x[1])
}
get_minimum(c("1"), FALSE)
get_minimum(c(1,2,NA), FALSE)
get_minimum(c(1,2,NA), TRUE)
get_minimum = function(x, na.rm) {
if (!((is.vector(x)) && (is.numeric(x)))) {
stop("non-numeric argument")
}
if (na.rm) {
x = remove_missing(x)
}
if (NA %in% x) {
return(NA)
}
x = sort(x)
return(x[1])
}
get_minimum(c(1,2,NA), FALSE)
library(shiny)
library(ggvis)
library(dplyr)
library(readr)
install.packages(ggvis)
install.packages("ggvis")
library(shiny)
library(ggvis)
library(dplyr)
library(readr)
runApp('stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
library(shiny); runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
runApp('stat133/stat133-hws-fall17/hw04/app/helper2.R')
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
install.packages("rgl")
x1 <- (x - min(x))/(max(x) - min(x))
y1 <- (y - min(y))/(max(y) - min(y))
z1 <- (z - min(z))/(max(z) - min(z))
rgl_init()
library("rgl")
library("rgl")
library("rgl")
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
library("plot3D")
install.packages("plot3D")
library("plot3D")
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
scatter3D(x, y, z, phi = 0, bty ="g")
scatter3D(x, y, z, phi = 0, bty = "g", type = "l",
ticktype = "detailed", lwd = 4)
mtcars
with(mtcars, text3D(qsec, drat, wt,
labels = rownames(mtcars),
col = gg.col(100), theta = 60, phi = 20,
main = "USA arrests", cex = 0.6,
bty = "g", ticktype = "detailed", d = 2,
adj = 0.5, font = 2))
#Make sure you install the package plot3D in order to reproduce this post
#install.packages("plot3D")
#Loading Packages
library("plot3D")
library(dplyr)
rightJoinTable = right_join(trainers, Pokemon, by = "Pokemon Name")
`mtcars`
mtcars
x = mtcars$drat
y = mtcars$wt
z = mtcars$qsec
scatter3D(x, y, z, colvar = NULL, col = "blue",
pch = 19, cex = 0.5)
scatter3D(x, y, z, col = "blue",
pch = 19, cex = 0.5)
scatter3D(x, y, z, col = "red",
pch = 19, cex = 0.5)
scatter3D(x, y, z, col = z,
pch = 19, cex = 0.5)
scatter3D(x, y, z, colvar = z ,
pch = 19, cex = 0.5)
scatter3D(x, y, z, col = "blue" ,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, col = "blue" ,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, col = "blue" ,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, col = "aquamarine" ,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, colvar = z, col = "aquamarine" ,
pch = 19, cex = 0.5)
scatter3D(x, y, z, bty = "f", main ="bty= 'f'")
head(mtcars)
scatter3D(x = x, y = y, z = z, colvar = NULL, col = "aquamarine" ,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, colvar = NULL, col = z,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, colvar = z, col = z,
pch = 19, cex = 0.5)
scatter3D(x = x, y = y, z = z, colvar = z,
pch = 19, cex = 0.5)
scatter3D(x, y, z, bty = "f", main ="bty= 'f'")
scatter3D(x, y, z, bty = "b2", colkey = FALSE, main ="bty= 'b2'" )
scatter3D(x, y, z, bty = "f", main ="bty= 'f'")
scatter3D(x, y, z, bty = "bl2", main ="bty= 'bl2'" )
#Plotting scatter plots with different boxes
scatter3D(x, y, z, bty = "f", main ="bty = 'f'")
scatter3D(x, y, z, bty = "bl2", main ="bty = 'bl2'" )
scatter3D(x, y, z, bty = "bl", main ="bty = 'bl'" )
#Plotting scatter plots with different boxes
scatter3D(x, y, z, bty = "f", main ="bty = 'f'")
scatter3D(x, y, z, bty = "bl2", main ="bty = 'bl2'" )
scatter3D(x, y, z, bty = "bl", main ="bty = 'bl'" )
scatter3D(x, y, z, pch = 18, bty = "u",
main ="bty = 'u'", col.panel ="dodgerblue2",
col.grid = "darkblue")
#Plotting scatter plots with different boxes
scatter3D(x, y, z, bty = "f", main ="bty = 'f'")
scatter3D(x, y, z, bty = "bl2", main ="bty = 'bl2'" )
scatter3D(x, y, z, bty = "bl", main ="bty = 'bl'" )
scatter3D(x, y, z, pch = 18, bty = "u",
main ="bty = 'u'", col.panel ="dodgerblue2",
col.grid = "deepskyblue")
# Top colkey
scatter3D(x, y, z, bty = "g",
colkey = list(side = 2, length = 0.5))
# Top colkey
scatter3D(x, y, z, bty = "g",
colkey = list(side = 3, length = 1))
# Top colkey
scatter3D(x, y, z, bty = "g",
colkey = list(side = 3, length = 0.65))
# Top colkey
scatter3D(x, y, z, bty = "g",
colkey = list(side = 3, length = 0.35))
# Top colkey
scatter3D(x, y, z, bty = "g",
colkey = list(side = 3, length = 0.4))
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 22, phi = 11)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 22, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 12, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 10, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 50, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 36, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 29, phi = 5)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 29, phi = 8)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 29, phi = 8)
scatter3D(x, y, z, pch = 18, bty = "u",
main ="bty = 'u'", col.panel ="lightpink",
col.grid = "lightgreen", phi = 1)
#A scatterplot with phi and theta to change view direction
scatter3D(x, y, z, theta = 29, phi = 8)
scatter3D(x, y, z, pch = 18, bty = "u",
main ="bty = 'u'", col.panel ="lightpink",
col.grid = "lightgreen", phi = 1, theta = 2)
scatter3D(x, y, z, pch = 18,  theta = 20, phi = 20,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 15,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 25,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 0,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 0,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 20,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 10, phi = 15,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 15, phi = 15,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
scatter3D(x, y, z, pch = 18,  theta = 23, phi = 15,
main = "mtcars data", xlab = "drat",
ylab ="wt", zlab = "qsec")
#Graphing a line plot
scatter3D(x, y, z, phi = 1, bty = "f", type = "l", lwd = 3)
#Graphing a line plot
scatter3D(x, y, z, phi = 1, bty = "f", type = "b", lwd = 3)
scatter3D(x, y, z, phi = 1, bty = "f", type = "l", lwd = 3)
#Graphing a line plot
scatter3D(x, y, z, phi = 15, bty = "f", type = "b", lwd = 3)
scatter3D(x, y, z, phi = 1, bty = "f", type = "l", lwd = 3)
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
+           ylab ="wt", zlab = "qsec")
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec")
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", font = 0.9)
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15)
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, font = 0.1 )
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, cex = 0.1 )
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, cex = 0.9 )
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, cex = 0.5 )
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, cex = 0.5, colvar = z )
#Plotting a text3D chart
text3D(x, y, z, labels = rownames(mtcars), xlab = "drat",
ylab ="wt", zlab = "qsec", theta = 65, phi = 15, cex = 0.5, colvar = z, col = gg.col(50) )
x0 <- c(0, 0, 2, 0, 2)
y0 <- c(0, 1, 0, 0, 2)
z0 <- c(2, 0, 5, 0, -1)
x1 <- c(2.89, -3.46, 2.49, 1.96, 2)
y1 <- c(0.36,  2, 3.02, 2, 5)
z1 <- c(-0.28, 0.09, 1.05, 0.2, 1)
#Plotting arrows in a 3D setting
arrows3D(x0, y0, z0, x1, y1, z1,
lwd = 1, d = 4, col = c("royalblue1", "seagreen2"),
main = "Arrows 3D", bty ="f")
#Plotting arrows in a 3D setting
arrows3D(x0, y0, z0, x1, y1, z1, phi = 10,
lwd = 1, d = 4, col = c("royalblue1", "seagreen2"),
main = "Arrows 3D", bty ="f")
rect3D(x0 = 0, y0 = 0.2, z0 = 0.2, x1 = 1.78, z1 = 5.9,
bty = "f", facets = TRUE,
border = "steelblue4", col ="#skyblue", alpha=0.5,
lwd = 2, phi = 10)
rect3D(x0 = 0, y0 = 0.2, z0 = 0.2, x1 = 1.78, z1 = 5.9,
bty = "f", facets = TRUE,
border = "steelblue4", col ="skyblue",
lwd = 2, phi = 10)
rect3D(x0 = 0, y0 = 0.2, z0 = 0.2, x1 = 1.78, z1 = 5.9,
bty = "f", facets = TRUE,
border = "magenta", col ="skyblue",
lwd = 2, phi = 10)
setwd("~/stat133/stat133-hws-fall17/hw04/app")
library(shiny); runApp('gradevis.R')
